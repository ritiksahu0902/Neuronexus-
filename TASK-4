#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Task {
  string description;
  bool completed;
};

class ToDoList {
private:
  vector<Task> tasks;

public:
  void addTask(const string& description) {
    tasks.push_back({description, false});
  }

  void viewTasks() {
    if (tasks.empty()) {
      cout << "No tasks in the list." << endl;
      return;
    }

    cout << "Tasks:" << endl;
    for (int i = 0; i < tasks.size(); ++i) {
      cout << "[" << (tasks[i].completed ? "âœ“" : " ") << "] " << i + 1 << ". " << tasks[i].description << endl;
    }
  }

  void markCompleted(int index) {
    if (tasks.empty() || index < 0 || index >= tasks.size()) {
      cout << "Invalid task index." << endl;
      return;
    }

    tasks[index].completed = true;
  }

  void removeTask(int index) {
    if (tasks.empty() || index < 0 || index >= tasks.size()) {
      cout << "Invalid task index." << endl;
      return;
    }

    tasks.erase(tasks.begin() + index);
  }
};

int main() {
  ToDoList list;

  while (true) {
    cout << "\nTo-Do List Manager" << endl;
    cout << "1. Add task" << endl;
    cout << "2. View tasks" << endl;
    cout << "3. Mark task as completed" << endl;
    cout << "4. Remove task" << endl;
    cout << "5. Exit" << endl;

    int choice;
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
      case 1: {
        string description;
        cout << "Enter task description: ";
        getline(cin, description);
        list.addTask(description);
        break;
      }
      case 2:
        list.viewTasks();
        break;
      case 3: {
        int index;
        cout << "Enter task index to mark completed: ";
        cin >> index;
        list.markCompleted(index - 1);
        break;
      }
      case 4: {
        int index;
        cout << "Enter task index to remove: ";
        cin >> index;
        list.removeTask(index - 1);
        break;
      }
      case 5:
        cout << "Exiting..." << endl;
        return 0;
      default:
        cout << "Invalid choice." << endl;
    }
  }

  return 0;
}
